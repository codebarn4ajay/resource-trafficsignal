package org.roadservice.api.trafficsignal.rest;

import org.roadservice.api.trafficsignal.domain.Signal;
import org.roadservice.api.trafficsignal.domain.SignalStreetWrapper;
import org.roadservice.api.trafficsignal.domain.Street;
import org.roadservice.api.trafficsignal.domain.StreetCrossing;
import org.roadservice.api.trafficsignal.service.TaskSchedulerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

@Component
public class StreetToSignalQueueTransformer {

    @Autowired
    private TaskSchedulerService taskSchedulerService;

    public List<SignalStreetWrapper> fromStreetToSignal(StreetCrossing streetCrossing) {
        List<SignalStreetWrapper> signalQueue = new ArrayList<>();
        SignalStreetWrapper signalLeftToRightStreetWrapper = null;
        SignalStreetWrapper signalTopToBottomWrapper = null;
        if (streetCrossing.getLeftAndRightStreets() != null) {
            signalLeftToRightStreetWrapper = streetToWrapper(streetCrossing.getLeftAndRightStreets(), false);
            signalQueue.add(signalLeftToRightStreetWrapper);
        }
        if (streetCrossing.getLeftAndRightStreets() != null) {
            //Make TopToBottom (North to South) as green as per requirements
            signalTopToBottomWrapper = streetToWrapper(streetCrossing.getTopAndBottomStreets(), true);
            signalQueue.add(signalTopToBottomWrapper);
        }
        return signalQueue;
    }

    private SignalStreetWrapper streetToWrapper(List<Street> leftAndRightStreets, boolean isGreen) {
        SignalStreetWrapper signalStreetWrapper = null;
        if (isGreen) {
            Signal signal = new Signal(1000, SignalStatus.GREEN_SIGNAL.getStatus()); //id will be auto-generated by data owner in real time
            signal.addObserver(taskSchedulerService);
            signalStreetWrapper = new SignalStreetWrapper(leftAndRightStreets, signal);
        } else {
            Signal signal = new Signal(2000, SignalStatus.RED_SIGNAL.getStatus());//id will be auto-generated by data owner in real time
            signal.addObserver(taskSchedulerService);
            signalStreetWrapper = new SignalStreetWrapper(leftAndRightStreets, signal);
        }
        return signalStreetWrapper;
    }
}
